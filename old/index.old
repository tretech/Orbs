<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Wnter OS</title>
  <style>
    body {
      margin: 0;
      background: black;
      color: #00FF00;
      font-family: 'Courier New', monospace;
      font-size: 1.2em;
      overflow: hidden;
    }
    #terminal, #explore, #admin {
      display: none;
      position: absolute;
      top: 0; left: 0; right: 0; bottom: 0;
      padding: 20px;
    }
    #terminal { display: block; white-space: pre; }
    .blinker { animation: blink 1s step-end infinite; }
    @keyframes blink {
      from, to { color: transparent }
      50% { color: #00FF00 }
    }
    #explore {
      background: #C0C0C0;
      font-family: 'Tahoma', sans-serif;
      color: black;
    }
    #orbList {
      position: relative;
      width: 100%;
      height: 200px;
      background: #000;
      overflow: hidden;
    }

    .orb {
      position: absolute;
      width: 20px;
      height: 20px;
      border-radius: 50%;
      background: radial-gradient(circle at center, #0ff 30%, #003 100%);
      box-shadow:
        0 0 4px #0ff,
        0 0 8px #0ff,
        0 0 12px #0ff;
    animation: floatOrb 6s infinite ease-in-out;
    }
    
    #orbManager button {
      margin: 5px 0;
      padding: 8px 12px;
      font-family: 'Courier New', monospace;
      background-color: #000;
      color: #0ff;
      border: 1px solid #0ff;
      cursor: pointer;
      box-shadow: 0 0 4px #0ff;
      transition: all 0.3s ease;
    }

    #orbManager button:hover {
      background-color: #003;
      box-shadow: 0 0 10px #0ff;
    }

    @keyframes floatOrb {
      0%   { transform: translateY(0) scale(1); opacity: 0.9; }
      50%  { transform: translateY(-20px) scale(1.2); opacity: 1; }
      100% { transform: translateY(0) scale(1); opacity: 0.9; }
    }

    .tile {
      position: absolute;
      width: 120px;
      height: 100px;
      background: white;
      border: 2px outset #aaa;
      padding: 10px;
      font-family: 'Courier New';
      text-align: center;
      cursor: pointer;
      box-shadow: 2px 2px 0 #666;
    }
    .tile:hover { background: #e0e0e0; }
    #admin {
      background: rgba(0, 0, 0, 0.85);
      color: #0ff;
      font-size: 1em;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      z-index: 99;
    }
    #devConsole {
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;
      background: #111;
      color: #0f0;
      padding: 10px;
      font-family: 'Courier New';
      display: none;
    }
    #orbManager {
      position: absolute;
      top: 20px;
      right: 20px;
      width: 240px;
      background: #222;
      color: #0ff;
      padding: 10px;
      font-family: 'Courier New';
     /* display: none; */
    }
   
    @keyframes flicker {
      0%, 19%, 21%, 23%, 25%, 54%, 56%, 100% {
        opacity: 0.95;
      }
      20%, 22%, 24%, 55% {
        opacity: 0.6;
        text-shadow: none;
      }
    }
    
    #orbContainer {
      position: relative;
      width: 100%;
      height: 200px;
      overflow: hidden;
    }
    
    #orbList {
      position: relative;
      width: 100%;
      height: 200px;
      overflow: hidden;
      background: #000;
    }

    .orb {
      position: absolute;
      width: 20px;
      height: 20px;
      border-radius: 50%;
      background: radial-gradient(circle at center, #0ff 30%, #003 100%);
      box-shadow:
        0 0 4px #0ff,
        0 0 8px #0ff,
        0 0 12px #0ff;
      animation: floatOrb 6s infinite ease-in-out;
    }

    @keyframes floatOrb {
      0%   { transform: translateY(0) scale(1); opacity: 0.9; }
      50%  { transform: translateY(-20px) scale(1.2); opacity: 1; }
      100% { transform: translateY(0) scale(1); opacity: 0.9; }
    }


    @keyframes float {
      0% { transform: translate(-50%, -50%) scale(1); }
      50% { transform: translate(-45%, -55%) scale(1.2); }
      100% { transform: translate(-50%, -50%) scale(1); }
    }

    #typewriter {
      color: #0f0;
      font-size: 0.9em;
      padding: 10px;
      white-space: pre-wrap;
      font-family: 'Courier New';
      text-align: left;
    }
  </style>
</head>
<body>
  <!-- Boot Terminal -->
  <div id="terminal">
    C:\><span id="input"></span><span class="blinker">█</span>
  </div>

  <!-- Explore Mode -->
  <div id="explore">
    <div class="tile" style="top: 20px; left: 20px;">SYSTEM.EXE</div>
    <div class="tile" style="top: 140px; left: 60px;">PROJECTS</div>
    <div class="tile" style="top: 260px; left: 100px;">MANIFESTO.TXT</div>
  </div>

  <div id="orbContainer"></div>

  <!-- Admin Panel -->
  <div id="admin">
    <h2>ADMIN MODE ACTIVE</h2>
    <p>You've entered the control chamber. Proceed wisely...</p>
  </div>

  <!-- Dev Console -->
  <div id="devConsole">
    JS&gt; <input id="consoleInput" style="width:90%; background:black; border:none; color:#0f0; font-family:'Courier New'; font-size:1em;" />
    <pre id="consoleOutput"></pre>
  </div>

  <!-- ORB Manager -->
  <div id="orbManager">
    <b>ORB MANAGER</b><br><br>
    <button onclick="spawnOrb()">Spawn ORB</button>
    <button onclick="resetOrbs()">Reset</button>
    <canvas id="orbCanvas" width="220" height="200"></canvas>
    <button onclick="launchAdmin()">ADMIN MODE</button>
    <button onclick="launchExplorer()">DEFINITION EXPLORER</button>
    <div id="orbList"></div>
  </div>
  <script>
    let orbCount = 0;

    function spawnOrb() {
      console.log("ORB spawned");
      const orb = document.createElement('div');
      orb.classList.add('orb');
      orb.style.left = `${Math.random() * 200}px`;
      orb.style.top = `${Math.random() * 160}px`;
      document.getElementById('orbList').appendChild(orb);
      console.log(orb);
    }
    <div id="term-table-container" class="mt-10 bg-gray-800 p-6 rounded-xl border border-gray-700 shadow-lg">
      <h2 class="text-xl font-semibold text-cyan-400 mb-4">Current Terms in Database</h2>
      <div class="overflow-auto max-h-96">
        <table class="w-full text-sm text-left text-gray-300">
          <thead class="text-xs uppercase bg-gray-700 text-gray-400">
            <tr>
              <th scope="col" class="px-4 py-3">Term</th>
              <th scope="col" class="px-4 py-3">Note</th>
              <th scope="col" class="px-4 py-3">Definitions</th>
              <th scope="col" class="px-4 py-3">Tags</th>
            </tr>
          </thead>
          <tbody id="term-table-body" class="text-white bg-gray-900 divide-y divide-gray-700"></tbody>
        </table>
      </div>
    </div>

    function resetOrbs() {
      orbCount = 0;
      document.getElementById('orbList').innerHTML = '';
    }
    function launchAdmin() {
      window.open('admin.html', '_blank');
    }

    function launchExplorer() {
      window.open('explorer.html', '_blank');
    }

    function showManifesto() {
      // your manifesto popup here
    }
  </script>
  <!-- Typewriter Manifesto -->
  <div id="typewriter" style="display:none;"></div>

  <!-- Sounds -->
  <audio id="bootSound" preload="auto"></audio>
  <audio id="adminSound" src="admin.mp3" preload="auto"></audio>
  <script>
   import { getDocs, collection } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-firestore.js";

    async function fetchTermsAndRender() {
      const termsRef = collection(db, `artifacts/${appId}/public/data/terms`);
      const snapshot = await getDocs(termsRef);
      const tableBody = document.getElementById('term-table-body');
      tableBody.innerHTML = ''; // Clear old data

      snapshot.forEach(doc => {
        const data = doc.data();
        const term = data.term || "—";
        const note = data.note || "";
        const defs = data.definitions || [];

        const tagSet = new Set();
        defs.forEach(d => (d.tags || []).forEach(tag => tagSet.add(tag)));

        const tr = document.createElement('tr');
        tr.innerHTML = `
          <td class="px-4 py-3 font-medium text-cyan-300">${term}</td>
          <td class="px-4 py-3">${note}</td>
          <td class="px-4 py-3 text-center">${defs.length}</td>
          <td class="px-4 py-3 text-center">${tagSet.size}</td>
        `;
        tableBody.appendChild(tr);
      });
    }
    
    
    document.addEventListener('DOMContentLoaded', () => {
      fetchTermsAndRender();
      let input = '';
      const inputEl = document.getElementById('input');
      const term = document.getElementById('terminal');
      const explore = document.getElementById('explore');
      const admin = document.getElementById('admin');
      admin.style.display = 'none'; // Force-hide Admin Mode at page load
      const bootSound = document.getElementById('bootSound');
      const adminSound = document.getElementById('adminSound');
      const devConsole = document.getElementById('devConsole');
      const orbManager = document.getElementById('orbManager');
      const typewriter = document.getElementById('typewriter');
      const consoleInput = document.getElementById('consoleInput');
      const consoleOutput = document.getElementById('consoleOutput');

    function fetchTermsAndRender() {
      const tableBody = document.getElementById('term-table-body');
        if (!tableBody) {
          console.warn("⚠️ Could not find #term-table-body. Make sure it's in your HTML.");
         return;
      }

  // proceed to fetch from Firestore and populate rows...
      }
let adminVisible = false;

document.addEventListener('keydown', e => {
  if (e.ctrlKey && e.altKey && e.key.toLowerCase() === 'a') {
    adminVisible = !adminVisible;
    admin.style.display = adminVisible ? 'flex' : 'none';
    adminSound.play();
  } else if (getComputedStyle(term).display === 'block') {
    if (e.key.length === 1) {
      input += e.key;
    } else if (e.key === 'Backspace') {
      input = input.slice(0, -1);
    } else if (e.key === 'Enter') {
      if (input.toLowerCase() === 'run') {
        term.style.display = 'none';
        explore.style.display = 'block';
        orbManager.style.display = 'block';
        const randomIndex = Math.floor(Math.random() * 16) + 1;
        bootSound.src = `boot${randomIndex}.mp3`;
        bootSound.play().catch(err => console.log("Boot sound error:", err));
      }
      input = '';
    }
    inputEl.textContent = input;
  } else if (e.key === '`') {
    devConsole.style.display = devConsole.style.display === 'block' ? 'none' : 'block';
    consoleInput.focus();
  }
});

    consoleInput.addEventListener('keydown', e => {
      if (e.key === 'Enter') {
        const code = e.target.value;
        try {
          const result = eval(code);
          consoleOutput.textContent += `> ${code}\n${result}\n`;
        } catch (err) {
          consoleOutput.textContent += `> ${code}\nError: ${err.message}\n`;
        }
        e.target.value = '';
      }
    });
    
    document.querySelectorAll('.tile').forEach(tile => {
      tile.addEventListener('click', () => {
        const label = tile.textContent.trim().toUpperCase();
        if (label === 'SYSTEM.EXE') {
          alert("Launching system diagnostics... (to be implemented)");
        } else if (label === 'PROJECTS') {
          alert("Opening projects workspace... (to be implemented)");
        } else if (label === 'MANIFESTO.TXT') {
          showManifesto();
        }
      });
    });


    let orbCount = 0;
    function spawnOrb() {
      console.log("ORB spawned");
      const orb = document.createElement('div');
      orb.classList.add('orb');
      orb.style.left = `${Math.random() * 180}px`;
      orb.style.top = `${Math.random() * 160}px`;
      document.getElementById('orbList').appendChild(orb);
      orbManager.style.display = 'block';
      console.log(orb);
    }

    function resetOrbs() {
      orbCount = 0;
      document.getElementById('orbList').innerHTML = '';
    }

    function showManifesto() {
      const lines = [
        "Wnter Manifesto // RESTRICTED",
        "",
        "We believe in precision, clarity, and creative rebellion.",
        "We wield technology as an extension of intent.",
        "The system is not the limit—it’s the challenge.",
        "",
        ":: EXECUTE BOLDNESS WITH COMPASSION ::"
      ];
      typewriter.style.display = 'block';
      typewriter.textContent = '';
      let i = 0;
      function typeLine() {
        if (i < lines.length) {
          typewriter.textContent += lines[i] + "\n";
          i++;
          setTimeout(typeLine, 500);
        }
      }
      typeLine();
    }

    window.spawnOrb = spawnOrb;
    window.resetOrbs = resetOrbs;
    window.showManifesto = showManifesto;

    console.log("DOMContentLoaded logic fully reached");
  });
  </script>
</body>
</html>
